// <auto-generated />
using System;
using Auth.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Db.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20190202024837_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Auth.Db.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(32);

                    b.HasKey("GroupId")
                        .HasName("pk_group");

                    b.ToTable("group");
                });

            modelBuilder.Entity("Auth.Db.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("avatar_url")
                        .HasMaxLength(1024);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasColumnName("handle")
                        .HasMaxLength(25);

                    b.Property<byte[]>("Password")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(15);

                    b.Property<byte[]>("Salt")
                        .HasColumnName("salt");

                    b.HasKey("UserId")
                        .HasName("pk_user");

                    b.HasAlternateKey("Handle")
                        .HasName("ak_user_handle");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Auth.Db.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id");

                    b.HasKey("UserId", "GroupId")
                        .HasName("pk_user_group");

                    b.HasIndex("GroupId")
                        .HasName("ix_user_group_group_id");

                    b.ToTable("user_group");
                });

            modelBuilder.Entity("Auth.Db.Models.VerificationToken", b =>
                {
                    b.Property<string>("VerificationTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("verification_token_id")
                        .HasDefaultValueSql("md5(random()::text)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("VerificationTokenId")
                        .HasName("pk_verification_token");

                    b.HasIndex("UserId")
                        .HasName("ix_verification_token_user_id");

                    b.ToTable("verification_token");
                });

            modelBuilder.Entity("Auth.Db.Models.UserGroup", b =>
                {
                    b.HasOne("Auth.Db.Models.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_user_group_group_group_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Auth.Db.Models.User", "User")
                        .WithMany("UsersGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_group_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Auth.Db.Models.VerificationToken", b =>
                {
                    b.HasOne("Auth.Db.Models.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_verification_token_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
